//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// Generated from C:\Projects\KleinISD-EdFi\BusinessRulesEngine\Engine\Language\MsdsParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Engine.Language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MsdsParser : Parser {
	public const int
		AFTER=1, ALL=2, AND=3, AS=4, BEFORE=5, BY=6, COLLECTION=7, DO=8, DEFINE=9, 
		ELSE=10, EXIST=11, EXPECT=12, FALSE=13, FOR=14, INCLUDES=15, IN=16, IS=17, 
		MATCH=18, NOT=19, NULL=20, OF=21, OR=22, REQUIRE=23, RULE=24, RULESET=25, 
		SINCE=26, TRUE=27, THAT=28, THE=29, THEN=30, TODAY=31, UNIQUE=32, WHEN=33, 
		LT=34, LE=35, EQ=36, GE=37, GT=38, NE=39, L_PAREN=40, R_PAREN=41, L_BRACKET=42, 
		R_BRACKET=43, L_BRACE=44, R_BRACE=45, COMMA=46, DOT=47, NEG=48, RULEID1=49, 
		RULEID2=50, INT=51, NUMBER=52, DATE1=53, DATE2=54, AGGREGATE=55, COUNT=56, 
		CARDINAL=57, DATEOP=58, MONTH=59, TIMEUNIT=60, WEEKDAY=61, ID=62, STRING=63, 
		COMMENT=64, WS=65;
	public const int
		RULE_file = 0, RULE_collection = 1, RULE_collectionid = 2, RULE_aliasId = 3, 
		RULE_alias = 4, RULE_aliasDefinitions = 5, RULE_ruleset = 6, RULE_rulesetid = 7, 
		RULE_ruleDefinition = 8, RULE_ruleid = 9, RULE_error = 10, RULE_pattern = 11, 
		RULE_component = 12, RULE_components = 13, RULE_lookups = 14, RULE_componentid = 15, 
		RULE_characteristicid = 16, RULE_characteristicids = 17, RULE_functionid = 18, 
		RULE_function = 19, RULE_tuple = 20, RULE_tuples = 21, RULE_filter = 22, 
		RULE_collection_filter = 23, RULE_condition = 24, RULE_expr = 25, RULE_intrinsic = 26, 
		RULE_constant = 27, RULE_date = 28, RULE_bool = 29, RULE_int = 30, RULE_num = 31, 
		RULE_str = 32, RULE_constants = 33, RULE_comparison = 34, RULE_operation = 35;
	public static readonly string[] ruleNames = {
		"file", "collection", "collectionid", "aliasId", "alias", "aliasDefinitions", 
		"ruleset", "rulesetid", "ruleDefinition", "ruleid", "error", "pattern", 
		"component", "components", "lookups", "componentid", "characteristicid", 
		"characteristicids", "functionid", "function", "tuple", "tuples", "filter", 
		"collection_filter", "condition", "expr", "intrinsic", "constant", "date", 
		"bool", "int", "num", "str", "constants", "comparison", "operation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'after'", "'all'", "'and'", "'as'", "'before'", "'by'", "'collection'", 
		null, null, "'else'", null, "'expect'", "'false'", "'for'", "'includes'", 
		"'in'", "'is'", null, null, "'null'", "'of'", "'or'", "'require'", "'rule'", 
		"'ruleset'", "'since'", "'true'", "'that'", "'the'", "'then'", "'today'", 
		"'unique'", "'when'", "'<'", null, "'='", null, "'>'", null, "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "','", "'.'", "'-'", null, null, null, null, 
		null, null, null, "'count'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AFTER", "ALL", "AND", "AS", "BEFORE", "BY", "COLLECTION", "DO", 
		"DEFINE", "ELSE", "EXIST", "EXPECT", "FALSE", "FOR", "INCLUDES", "IN", 
		"IS", "MATCH", "NOT", "NULL", "OF", "OR", "REQUIRE", "RULE", "RULESET", 
		"SINCE", "TRUE", "THAT", "THE", "THEN", "TODAY", "UNIQUE", "WHEN", "LT", 
		"LE", "EQ", "GE", "GT", "NE", "L_PAREN", "R_PAREN", "L_BRACKET", "R_BRACKET", 
		"L_BRACE", "R_BRACE", "COMMA", "DOT", "NEG", "RULEID1", "RULEID2", "INT", 
		"NUMBER", "DATE1", "DATE2", "AGGREGATE", "COUNT", "CARDINAL", "DATEOP", 
		"MONTH", "TIMEUNIT", "WEEKDAY", "ID", "STRING", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MsdsParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MsdsParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public AliasDefinitionsContext[] aliasDefinitions() {
			return GetRuleContexts<AliasDefinitionsContext>();
		}
		public AliasDefinitionsContext aliasDefinitions(int i) {
			return GetRuleContext<AliasDefinitionsContext>(i);
		}
		public CollectionContext[] collection() {
			return GetRuleContexts<CollectionContext>();
		}
		public CollectionContext collection(int i) {
			return GetRuleContext<CollectionContext>(i);
		}
		public RulesetContext[] ruleset() {
			return GetRuleContexts<RulesetContext>();
		}
		public RulesetContext ruleset(int i) {
			return GetRuleContext<RulesetContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COLLECTION) | (1L << DEFINE) | (1L << RULESET))) != 0)) {
				{
				State = 75;
				switch (_input.La(1)) {
				case DEFINE:
					{
					State = 72; aliasDefinitions();
					}
					break;
				case COLLECTION:
					{
					State = 73; collection();
					}
					break;
				case RULESET:
					{
					State = 74; ruleset();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 79;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(MsdsParser.COLLECTION, 0); }
		public CollectionidContext collectionid() {
			return GetRuleContext<CollectionidContext>(0);
		}
		public ITerminalNode INCLUDES() { return GetToken(MsdsParser.INCLUDES, 0); }
		public RulesetidContext[] rulesetid() {
			return GetRuleContexts<RulesetidContext>();
		}
		public RulesetidContext rulesetid(int i) {
			return GetRuleContext<RulesetidContext>(i);
		}
		public RuleidContext[] ruleid() {
			return GetRuleContexts<RuleidContext>();
		}
		public RuleidContext ruleid(int i) {
			return GetRuleContext<RuleidContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public AliasDefinitionsContext aliasDefinitions() {
			return GetRuleContext<AliasDefinitionsContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(COLLECTION);
			State = 81; collectionid();
			State = 82; Match(INCLUDES);
			State = 85;
			switch (_input.La(1)) {
			case ID:
				{
				State = 83; rulesetid();
				}
				break;
			case RULEID1:
			case RULEID2:
				{
				State = 84; ruleid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 87; Match(COMMA);
				State = 90;
				switch (_input.La(1)) {
				case ID:
					{
					State = 88; rulesetid();
					}
					break;
				case RULEID1:
				case RULEID2:
					{
					State = 89; ruleid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 96;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 98;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 97; aliasDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionidContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MsdsParser.ID, 0); }
		public CollectionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCollectionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCollectionid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionidContext collectionid() {
		CollectionidContext _localctx = new CollectionidContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_collectionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasIdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MsdsParser.ID, 0); }
		public AliasIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterAliasId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitAliasId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasIdContext aliasId() {
		AliasIdContext _localctx = new AliasIdContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_aliasId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public AliasIdContext aliasId() {
			return GetRuleContext<AliasIdContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(MsdsParser.EQ, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; aliasId();
			State = 105; Match(EQ);
			State = 106; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasDefinitionsContext : ParserRuleContext {
		public ITerminalNode DEFINE() { return GetToken(MsdsParser.DEFINE, 0); }
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public AliasDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterAliasDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitAliasDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasDefinitionsContext aliasDefinitions() {
		AliasDefinitionsContext _localctx = new AliasDefinitionsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_aliasDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(DEFINE);
			State = 109; alias();
			State = 114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 110; Match(COMMA);
				State = 111; alias();
				}
				}
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetContext : ParserRuleContext {
		public ITerminalNode RULESET() { return GetToken(MsdsParser.RULESET, 0); }
		public RulesetidContext rulesetid() {
			return GetRuleContext<RulesetidContext>(0);
		}
		public RuleDefinitionContext[] ruleDefinition() {
			return GetRuleContexts<RuleDefinitionContext>();
		}
		public RuleDefinitionContext ruleDefinition(int i) {
			return GetRuleContext<RuleDefinitionContext>(i);
		}
		public RulesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterRuleset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitRuleset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetContext ruleset() {
		RulesetContext _localctx = new RulesetContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ruleset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(RULESET);
			State = 118; rulesetid();
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 119; ruleDefinition();
				}
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==RULE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetidContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MsdsParser.ID, 0); }
		public RulesetidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulesetid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterRulesetid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitRulesetid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulesetid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetidContext rulesetid() {
		RulesetidContext _localctx = new RulesetidContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_rulesetid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleDefinitionContext : ParserRuleContext {
		public ITerminalNode RULE() { return GetToken(MsdsParser.RULE, 0); }
		public RuleidContext ruleid() {
			return GetRuleContext<RuleidContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MsdsParser.ELSE, 0); }
		public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public ITerminalNode REQUIRE() { return GetToken(MsdsParser.REQUIRE, 0); }
		public ITerminalNode EXPECT() { return GetToken(MsdsParser.EXPECT, 0); }
		public ITerminalNode WHEN() { return GetToken(MsdsParser.WHEN, 0); }
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(MsdsParser.THEN, 0); }
		public ITerminalNode THAT() { return GetToken(MsdsParser.THAT, 0); }
		public RuleDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterRuleDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitRuleDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleDefinitionContext ruleDefinition() {
		RuleDefinitionContext _localctx = new RuleDefinitionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_ruleDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(RULE);
			State = 127; ruleid();
			State = 132;
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 128; Match(WHEN);
				State = 129; filter(0);
				State = 130; Match(THEN);
				}
			}

			State = 134;
			_la = _input.La(1);
			if ( !(_la==EXPECT || _la==REQUIRE) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 136;
			_la = _input.La(1);
			if (_la==THAT) {
				{
				State = 135; Match(THAT);
				}
			}

			State = 138; condition(0);
			State = 139; Match(ELSE);
			State = 140; error();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleidContext : ParserRuleContext {
		public ITerminalNode RULEID1() { return GetToken(MsdsParser.RULEID1, 0); }
		public ITerminalNode RULEID2() { return GetToken(MsdsParser.RULEID2, 0); }
		public RuleidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterRuleid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitRuleid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleidContext ruleid() {
		RuleidContext _localctx = new RuleidContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_ruleid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = _input.La(1);
			if ( !(_la==RULEID1 || _la==RULEID2) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MsdsParser.STRING, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MsdsParser.STRING, 0); }
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentContext : ParserRuleContext {
		public ComponentidContext componentid() {
			return GetRuleContext<ComponentidContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(MsdsParser.DOT, 0); }
		public CharacteristicidContext characteristicid() {
			return GetRuleContext<CharacteristicidContext>(0);
		}
		public ComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentContext component() {
		ComponentContext _localctx = new ComponentContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_component);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; componentid();
			State = 149; Match(DOT);
			State = 150; characteristicid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentsContext : ParserRuleContext {
		public ComponentidContext componentid() {
			return GetRuleContext<ComponentidContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(MsdsParser.DOT, 0); }
		public CharacteristicidsContext characteristicids() {
			return GetRuleContext<CharacteristicidsContext>(0);
		}
		public ComponentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_components; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentsContext components() {
		ComponentsContext _localctx = new ComponentsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_components);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; componentid();
			State = 153; Match(DOT);
			State = 154; characteristicids();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LookupsContext : ParserRuleContext {
		public ComponentidContext componentid() {
			return GetRuleContext<ComponentidContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(MsdsParser.DOT, 0); }
		public CharacteristicidsContext characteristicids() {
			return GetRuleContext<CharacteristicidsContext>(0);
		}
		public LookupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookups; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterLookups(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitLookups(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLookups(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LookupsContext lookups() {
		LookupsContext _localctx = new LookupsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_lookups);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; componentid();
			State = 157; Match(DOT);
			State = 158; characteristicids();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentidContext : ParserRuleContext {
		public ITerminalNode L_BRACE() { return GetToken(MsdsParser.L_BRACE, 0); }
		public ITerminalNode ID() { return GetToken(MsdsParser.ID, 0); }
		public ITerminalNode R_BRACE() { return GetToken(MsdsParser.R_BRACE, 0); }
		public ComponentidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterComponentid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitComponentid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentidContext componentid() {
		ComponentidContext _localctx = new ComponentidContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_componentid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(L_BRACE);
			State = 161; Match(ID);
			State = 162; Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacteristicidContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(MsdsParser.L_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(MsdsParser.ID, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(MsdsParser.R_BRACKET, 0); }
		public CharacteristicidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characteristicid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCharacteristicid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCharacteristicid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacteristicid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacteristicidContext characteristicid() {
		CharacteristicidContext _localctx = new CharacteristicidContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_characteristicid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(L_BRACKET);
			State = 165; Match(ID);
			State = 166; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacteristicidsContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(MsdsParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(MsdsParser.R_BRACKET, 0); }
		public ITerminalNode[] ID() { return GetTokens(MsdsParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MsdsParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public CharacteristicidsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characteristicids; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCharacteristicids(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCharacteristicids(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacteristicids(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacteristicidsContext characteristicids() {
		CharacteristicidsContext _localctx = new CharacteristicidsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_characteristicids);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(L_BRACKET);
			State = 170;
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 169; Match(ID);
				}
			}

			State = 176;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 172; Match(COMMA);
				State = 173; Match(ID);
				}
				}
				State = 178;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 179; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionidContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MsdsParser.ID, 0); }
		public FunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterFunctionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitFunctionid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionidContext functionid() {
		FunctionidContext _localctx = new FunctionidContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_functionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionidContext functionid() {
			return GetRuleContext<FunctionidContext>(0);
		}
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; functionid();
			State = 184; Match(L_PAREN);
			State = 186;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FALSE) | (1L << TRUE) | (1L << THE) | (1L << TODAY) | (1L << L_BRACE) | (1L << RULEID1) | (1L << INT) | (1L << NUMBER) | (1L << DATE1) | (1L << DATE2) | (1L << AGGREGATE) | (1L << COUNT) | (1L << CARDINAL) | (1L << DATEOP) | (1L << TIMEUNIT) | (1L << ID) | (1L << STRING))) != 0)) {
				{
				State = 185; expr();
				}
			}

			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 188; Match(COMMA);
				State = 189; expr();
				}
				}
				State = 194;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 195; Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(L_PAREN);
			State = 198; constant();
			State = 203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 199; Match(COMMA);
				State = 200; constant();
				}
				}
				State = 205;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 206; Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuplesContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(MsdsParser.L_BRACKET, 0); }
		public TupleContext[] tuple() {
			return GetRuleContexts<TupleContext>();
		}
		public TupleContext tuple(int i) {
			return GetRuleContext<TupleContext>(i);
		}
		public ITerminalNode R_BRACKET() { return GetToken(MsdsParser.R_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public TuplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuples; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterTuples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitTuples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuplesContext tuples() {
		TuplesContext _localctx = new TuplesContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_tuples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(L_BRACKET);
			State = 209; tuple();
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 210; Match(COMMA);
				State = 211; tuple();
				}
				}
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 217; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
	 
		public FilterContext() { }
		public virtual void CopyFrom(FilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Filter_operationContext : FilterContext {
		public FilterContext[] filter() {
			return GetRuleContexts<FilterContext>();
		}
		public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public Filter_operationContext(FilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterFilter_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitFilter_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_operation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Filter_0Context : FilterContext {
		public Collection_filterContext collection_filter() {
			return GetRuleContext<Collection_filterContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public Filter_0Context(FilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterFilter_0(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitFilter_0(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		return filter(0);
	}

	private FilterContext filter(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FilterContext _localctx = new FilterContext(_ctx, _parentState);
		FilterContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_filter, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				_localctx = new Filter_0Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 220; collection_filter();
				}
				break;

			case 2:
				{
				_localctx = new Filter_0Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 221; condition(0);
				}
				break;

			case 3:
				{
				_localctx = new Filter_0Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 222; Match(L_PAREN);
				State = 223; filter(0);
				State = 224; Match(R_PAREN);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 234;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Filter_operationContext(new FilterContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_filter);
					State = 228;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 229; operation();
					State = 230; filter(2);
					}
					} 
				}
				State = 236;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Collection_filterContext : ParserRuleContext {
		public Collection_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_filter; } }
	 
		public Collection_filterContext() { }
		public virtual void CopyFrom(Collection_filterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Filter_collectionContext : Collection_filterContext {
		public ITerminalNode COLLECTION() { return GetToken(MsdsParser.COLLECTION, 0); }
		public ITerminalNode IS() { return GetToken(MsdsParser.IS, 0); }
		public CollectionidContext collectionid() {
			return GetRuleContext<CollectionidContext>(0);
		}
		public Filter_collectionContext(Collection_filterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterFilter_collection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitFilter_collection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_collection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Filter_collectionsContext : Collection_filterContext {
		public ITerminalNode COLLECTION() { return GetToken(MsdsParser.COLLECTION, 0); }
		public ITerminalNode IS() { return GetToken(MsdsParser.IS, 0); }
		public ITerminalNode IN() { return GetToken(MsdsParser.IN, 0); }
		public ITerminalNode L_BRACKET() { return GetToken(MsdsParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(MsdsParser.R_BRACKET, 0); }
		public CollectionidContext[] collectionid() {
			return GetRuleContexts<CollectionidContext>();
		}
		public CollectionidContext collectionid(int i) {
			return GetRuleContext<CollectionidContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public Filter_collectionsContext(Collection_filterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterFilter_collections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitFilter_collections(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_collections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_filterContext collection_filter() {
		Collection_filterContext _localctx = new Collection_filterContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_collection_filter);
		int _la;
		try {
			State = 255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				_localctx = new Filter_collectionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; Match(COLLECTION);
				State = 238; Match(IS);
				State = 239; collectionid();
				}
				break;

			case 2:
				_localctx = new Filter_collectionsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(COLLECTION);
				State = 241; Match(IS);
				State = 242; Match(IN);
				State = 243; Match(L_BRACKET);
				State = 245;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 244; collectionid();
					}
				}

				State = 251;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 247; Match(COMMA);
					State = 248; collectionid();
					}
					}
					State = 253;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 254; Match(R_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Condition_patternContext : ConditionContext {
		public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		public ITerminalNode MATCH() { return GetToken(MsdsParser.MATCH, 0); }
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MsdsParser.DO, 0); }
		public ITerminalNode NOT() { return GetToken(MsdsParser.NOT, 0); }
		public Condition_patternContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_pattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_pattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_intuplesContext : ConditionContext {
		public ComponentsContext components() {
			return GetRuleContext<ComponentsContext>(0);
		}
		public ITerminalNode IS() { return GetToken(MsdsParser.IS, 0); }
		public ITerminalNode IN() { return GetToken(MsdsParser.IN, 0); }
		public TuplesContext tuples() {
			return GetRuleContext<TuplesContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MsdsParser.NOT, 0); }
		public Condition_intuplesContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_intuples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_intuples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_intuples(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_inlookupsContext : ConditionContext {
		public ComponentsContext components() {
			return GetRuleContext<ComponentsContext>(0);
		}
		public ITerminalNode IS() { return GetToken(MsdsParser.IS, 0); }
		public ITerminalNode IN() { return GetToken(MsdsParser.IN, 0); }
		public LookupsContext lookups() {
			return GetRuleContext<LookupsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MsdsParser.NOT, 0); }
		public Condition_inlookupsContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_inlookups(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_inlookups(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_inlookups(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_compoundContext : ConditionContext {
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public Condition_compoundContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_compound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_compound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_compound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_parenthesisContext : ConditionContext {
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public Condition_parenthesisContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_parenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_parenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_parenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_inconstsContext : ConditionContext {
		public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		public ITerminalNode IS() { return GetToken(MsdsParser.IS, 0); }
		public ITerminalNode IN() { return GetToken(MsdsParser.IN, 0); }
		public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MsdsParser.NOT, 0); }
		public Condition_inconstsContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_inconsts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_inconsts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_inconsts(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_comparisonContext : ConditionContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public Condition_comparisonContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_comparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_comparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_comparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_exists1Context : ConditionContext {
		public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		public ITerminalNode EXIST() { return GetToken(MsdsParser.EXIST, 0); }
		public ITerminalNode DO() { return GetToken(MsdsParser.DO, 0); }
		public ITerminalNode NOT() { return GetToken(MsdsParser.NOT, 0); }
		public Condition_exists1Context(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_exists1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_exists1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_exists1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_uniqueContext : ConditionContext {
		public ComponentsContext components() {
			return GetRuleContext<ComponentsContext>(0);
		}
		public ITerminalNode IS() { return GetToken(MsdsParser.IS, 0); }
		public ITerminalNode UNIQUE() { return GetToken(MsdsParser.UNIQUE, 0); }
		public ITerminalNode NOT() { return GetToken(MsdsParser.NOT, 0); }
		public Condition_uniqueContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_unique(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_unique(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_unique(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Condition_exists2Context : ConditionContext {
		public ComponentidContext componentid() {
			return GetRuleContext<ComponentidContext>(0);
		}
		public ITerminalNode EXIST() { return GetToken(MsdsParser.EXIST, 0); }
		public ITerminalNode DO() { return GetToken(MsdsParser.DO, 0); }
		public ITerminalNode NOT() { return GetToken(MsdsParser.NOT, 0); }
		public Condition_exists2Context(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCondition_exists2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCondition_exists2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_exists2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(_ctx, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				_localctx = new Condition_parenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 258; Match(L_PAREN);
				State = 259; condition(0);
				State = 260; Match(R_PAREN);
				}
				break;

			case 2:
				{
				_localctx = new Condition_patternContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 262; component();
				State = 265;
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 263; Match(DO);
					State = 264; Match(NOT);
					}
				}

				State = 267; Match(MATCH);
				State = 268; pattern();
				}
				break;

			case 3:
				{
				_localctx = new Condition_exists1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 270; component();
				State = 273;
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 271; Match(DO);
					State = 272; Match(NOT);
					}
				}

				State = 275; Match(EXIST);
				}
				break;

			case 4:
				{
				_localctx = new Condition_exists2Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 277; componentid();
				State = 280;
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 278; Match(DO);
					State = 279; Match(NOT);
					}
				}

				State = 282; Match(EXIST);
				}
				break;

			case 5:
				{
				_localctx = new Condition_uniqueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 284; components();
				State = 285; Match(IS);
				State = 287;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 286; Match(NOT);
					}
				}

				State = 289; Match(UNIQUE);
				}
				break;

			case 6:
				{
				_localctx = new Condition_intuplesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 291; components();
				State = 292; Match(IS);
				State = 294;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 293; Match(NOT);
					}
				}

				State = 296; Match(IN);
				State = 297; tuples();
				}
				break;

			case 7:
				{
				_localctx = new Condition_inconstsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 299; component();
				State = 300; Match(IS);
				State = 302;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 301; Match(NOT);
					}
				}

				State = 304; Match(IN);
				State = 305; constants();
				}
				break;

			case 8:
				{
				_localctx = new Condition_inlookupsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 307; components();
				State = 308; Match(IS);
				State = 310;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 309; Match(NOT);
					}
				}

				State = 312; Match(IN);
				State = 313; lookups();
				}
				break;

			case 9:
				{
				_localctx = new Condition_comparisonContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 315; expr();
				State = 316; comparison();
				State = 317; expr();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 331;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Condition_compoundContext(new ConditionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_condition);
					State = 321;
					if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
					State = 325;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 322; operation();
							State = 323; condition(0);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 327;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					} 
				}
				State = 333;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_componentContext : ExprContext {
		public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		public Expr_componentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterExpr_component(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitExpr_component(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_component(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_constantContext : ExprContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Expr_constantContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterExpr_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitExpr_constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_constant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_functionContext : ExprContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public Expr_functionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterExpr_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitExpr_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_function(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_intrinsicContext : ExprContext {
		public IntrinsicContext intrinsic() {
			return GetRuleContext<IntrinsicContext>(0);
		}
		public Expr_intrinsicContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterExpr_intrinsic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitExpr_intrinsic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_intrinsic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_expr);
		try {
			State = 338;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				_localctx = new Expr_componentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; component();
				}
				break;

			case 2:
				_localctx = new Expr_functionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; function();
				}
				break;

			case 3:
				_localctx = new Expr_constantContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 336; constant();
				}
				break;

			case 4:
				_localctx = new Expr_intrinsicContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 337; intrinsic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntrinsicContext : ParserRuleContext {
		public IntrinsicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsic; } }
	 
		public IntrinsicContext() { }
		public virtual void CopyFrom(IntrinsicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Intrinsic_aggregateContext : IntrinsicContext {
		public ITerminalNode AGGREGATE() { return GetToken(MsdsParser.AGGREGATE, 0); }
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public ITerminalNode BY() { return GetToken(MsdsParser.BY, 0); }
		public CharacteristicidsContext characteristicids() {
			return GetRuleContext<CharacteristicidsContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(MsdsParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Intrinsic_aggregateContext(IntrinsicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_aggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_aggregate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntrinsic_aggregate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Intrinsic_arithmeticContext : IntrinsicContext {
		public ITerminalNode AGGREGATE() { return GetToken(MsdsParser.AGGREGATE, 0); }
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public ComponentsContext[] components() {
			return GetRuleContexts<ComponentsContext>();
		}
		public ComponentsContext components(int i) {
			return GetRuleContext<ComponentsContext>(i);
		}
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public Intrinsic_arithmeticContext(IntrinsicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_arithmetic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_arithmetic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntrinsic_arithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DifferentialDateContext : IntrinsicContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode TIMEUNIT() { return GetToken(MsdsParser.TIMEUNIT, 0); }
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public ITerminalNode BEFORE() { return GetToken(MsdsParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(MsdsParser.AFTER, 0); }
		public DifferentialDateContext(IntrinsicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterDifferentialDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitDifferentialDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferentialDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Intrinsic_aggregatecountContext : IntrinsicContext {
		public ITerminalNode COUNT() { return GetToken(MsdsParser.COUNT, 0); }
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public ComponentidContext componentid() {
			return GetRuleContext<ComponentidContext>(0);
		}
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public ITerminalNode BY() { return GetToken(MsdsParser.BY, 0); }
		public CharacteristicidsContext characteristicids() {
			return GetRuleContext<CharacteristicidsContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(MsdsParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Intrinsic_aggregatecountContext(IntrinsicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_aggregatecount(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_aggregatecount(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntrinsic_aggregatecount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntrinsicContext intrinsic() {
		IntrinsicContext _localctx = new IntrinsicContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_intrinsic);
		int _la;
		try {
			State = 383;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				_localctx = new Intrinsic_aggregatecountContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; Match(COUNT);
				State = 341; Match(L_PAREN);
				State = 342; componentid();
				State = 345;
				_la = _input.La(1);
				if (_la==BY) {
					{
					State = 343; Match(BY);
					State = 344; characteristicids();
					}
				}

				State = 349;
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 347; Match(WHEN);
					State = 348; condition(0);
					}
				}

				State = 351; Match(R_PAREN);
				}
				break;

			case 2:
				_localctx = new Intrinsic_aggregateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; Match(AGGREGATE);
				State = 354; Match(L_PAREN);
				State = 355; component();
				State = 358;
				_la = _input.La(1);
				if (_la==BY) {
					{
					State = 356; Match(BY);
					State = 357; characteristicids();
					}
				}

				State = 362;
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 360; Match(WHEN);
					State = 361; condition(0);
					}
				}

				State = 364; Match(R_PAREN);
				}
				break;

			case 3:
				_localctx = new Intrinsic_arithmeticContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 366; Match(AGGREGATE);
				State = 367; Match(L_PAREN);
				State = 368; components();
				State = 373;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 369; Match(COMMA);
					State = 370; components();
					}
					}
					State = 375;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 376; Match(R_PAREN);
				}
				break;

			case 4:
				_localctx = new DifferentialDateContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 378; @int();
				State = 379; Match(TIMEUNIT);
				State = 380;
				_la = _input.La(1);
				if ( !(_la==AFTER || _la==BEFORE) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 381; date();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public AliasIdContext aliasId() {
			return GetRuleContext<AliasIdContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_constant);
		try {
			State = 390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385; @bool();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; date();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 387; num();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 388; str();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 389; aliasId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
	 
		public DateContext() { }
		public virtual void CopyFrom(DateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Intrinsic_timePeriodContext : DateContext {
		public ITerminalNode TIMEUNIT() { return GetToken(MsdsParser.TIMEUNIT, 0); }
		public ITerminalNode SINCE() { return GetToken(MsdsParser.SINCE, 0); }
		public DateContext[] date() {
			return GetRuleContexts<DateContext>();
		}
		public DateContext date(int i) {
			return GetRuleContext<DateContext>(i);
		}
		public ITerminalNode AS() { return GetToken(MsdsParser.AS, 0); }
		public ITerminalNode OF() { return GetToken(MsdsParser.OF, 0); }
		public Intrinsic_timePeriodContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_timePeriod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_timePeriod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntrinsic_timePeriod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CardinalDateContext : DateContext {
		public ITerminalNode CARDINAL() { return GetToken(MsdsParser.CARDINAL, 0); }
		public ITerminalNode WEEKDAY() { return GetToken(MsdsParser.WEEKDAY, 0); }
		public ITerminalNode IN() { return GetToken(MsdsParser.IN, 0); }
		public ITerminalNode MONTH() { return GetToken(MsdsParser.MONTH, 0); }
		public CardinalDateContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterCardinalDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitCardinalDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardinalDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComponentDateContext : DateContext {
		public ComponentContext component() {
			return GetRuleContext<ComponentContext>(0);
		}
		public ComponentDateContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterComponentDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitComponentDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TodayContext : DateContext {
		public ITerminalNode TODAY() { return GetToken(MsdsParser.TODAY, 0); }
		public TodayContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterToday(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitToday(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToday(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DayMonthContext : DateContext {
		public ITerminalNode DATE1() { return GetToken(MsdsParser.DATE1, 0); }
		public DayMonthContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterDayMonth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitDayMonth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayMonth(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateoperationContext : DateContext {
		public ITerminalNode DATEOP() { return GetToken(MsdsParser.DATEOP, 0); }
		public ITerminalNode L_PAREN() { return GetToken(MsdsParser.L_PAREN, 0); }
		public DateContext[] date() {
			return GetRuleContexts<DateContext>();
		}
		public DateContext date(int i) {
			return GetRuleContext<DateContext>(i);
		}
		public ITerminalNode R_PAREN() { return GetToken(MsdsParser.R_PAREN, 0); }
		public ITerminalNode THE() { return GetToken(MsdsParser.THE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public ITerminalNode OF() { return GetToken(MsdsParser.OF, 0); }
		public ITerminalNode IN() { return GetToken(MsdsParser.IN, 0); }
		public DateoperationContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterDateoperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitDateoperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateoperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DayMonthYearContext : DateContext {
		public ITerminalNode DATE2() { return GetToken(MsdsParser.DATE2, 0); }
		public DayMonthYearContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterDayMonthYear(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitDayMonthYear(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayMonthYear(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasIdDateContext : DateContext {
		public AliasIdContext aliasId() {
			return GetRuleContext<AliasIdContext>(0);
		}
		public AliasIdDateContext(DateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterAliasIdDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitAliasIdDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasIdDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_date);
		int _la;
		try {
			State = 426;
			switch (_input.La(1)) {
			case TODAY:
				_localctx = new TodayContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; Match(TODAY);
				}
				break;
			case DATE1:
				_localctx = new DayMonthContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 393; Match(DATE1);
				}
				break;
			case DATE2:
				_localctx = new DayMonthYearContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 394; Match(DATE2);
				}
				break;
			case CARDINAL:
				_localctx = new CardinalDateContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 395; Match(CARDINAL);
				State = 396; Match(WEEKDAY);
				State = 397; Match(IN);
				State = 398; Match(MONTH);
				}
				break;
			case L_BRACE:
				_localctx = new ComponentDateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 399; component();
				}
				break;
			case ID:
				_localctx = new AliasIdDateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 400; aliasId();
				}
				break;
			case TIMEUNIT:
				_localctx = new Intrinsic_timePeriodContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 401; Match(TIMEUNIT);
				State = 402; Match(SINCE);
				State = 403; date();
				State = 407;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 404; Match(AS);
					State = 405; Match(OF);
					State = 406; date();
					}
					break;
				}
				}
				break;
			case THE:
			case DATEOP:
				_localctx = new DateoperationContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 410;
				_la = _input.La(1);
				if (_la==THE) {
					{
					State = 409; Match(THE);
					}
				}

				State = 412; Match(DATEOP);
				State = 414;
				_la = _input.La(1);
				if (_la==IN || _la==OF) {
					{
					State = 413;
					_la = _input.La(1);
					if ( !(_la==IN || _la==OF) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
				}

				State = 416; Match(L_PAREN);
				State = 417; date();
				State = 420;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 418; Match(COMMA);
					State = 419; date();
					}
					}
					State = 422;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				State = 424; Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(MsdsParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MsdsParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MsdsParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode RULEID1() { return GetToken(MsdsParser.RULEID1, 0); }
		public ITerminalNode NUMBER() { return GetToken(MsdsParser.NUMBER, 0); }
		public ITerminalNode INT() { return GetToken(MsdsParser.INT, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RULEID1) | (1L << INT) | (1L << NUMBER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MsdsParser.STRING, 0); }
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_str);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(MsdsParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(MsdsParser.R_BRACKET, 0); }
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MsdsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MsdsParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(L_BRACKET);
			State = 438;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FALSE) | (1L << TRUE) | (1L << THE) | (1L << TODAY) | (1L << L_BRACE) | (1L << RULEID1) | (1L << INT) | (1L << NUMBER) | (1L << DATE1) | (1L << DATE2) | (1L << CARDINAL) | (1L << DATEOP) | (1L << TIMEUNIT) | (1L << ID) | (1L << STRING))) != 0)) {
				{
				State = 437; constant();
				}
			}

			State = 444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 440; Match(COMMA);
				State = 441; constant();
				}
				}
				State = 446;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 447; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(MsdsParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(MsdsParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(MsdsParser.EQ, 0); }
		public ITerminalNode GE() { return GetToken(MsdsParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(MsdsParser.GT, 0); }
		public ITerminalNode NE() { return GetToken(MsdsParser.NE, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LE) | (1L << EQ) | (1L << GE) | (1L << GT) | (1L << NE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(MsdsParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MsdsParser.OR, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMsdsParserListener typedListener = listener as IMsdsParserListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMsdsParserVisitor<TResult> typedVisitor = visitor as IMsdsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			_la = _input.La(1);
			if ( !(_la==AND || _la==OR) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return filter_sempred((FilterContext)_localctx, predIndex);

		case 24: return condition_sempred((ConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool filter_sempred(FilterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 9);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x43\x1C8\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\x3\x2\x3\x2\a\x2N\n\x2\f\x2\xE"+
		"\x2Q\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3X\n\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3]\n\x3\a\x3_\n\x3\f\x3\xE\x3\x62\v\x3\x3\x3\x5\x3\x65\n\x3\x3\x4"+
		"\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\a\as\n"+
		"\a\f\a\xE\av\v\a\x3\b\x3\b\x3\b\x6\b{\n\b\r\b\xE\b|\x3\t\x3\t\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x5\n\x87\n\n\x3\n\x3\n\x5\n\x8B\n\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x5\x13\xAD\n\x13\x3\x13\x3"+
		"\x13\a\x13\xB1\n\x13\f\x13\xE\x13\xB4\v\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x5\x15\xBD\n\x15\x3\x15\x3\x15\a\x15\xC1\n\x15\f"+
		"\x15\xE\x15\xC4\v\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\a\x16"+
		"\xCC\n\x16\f\x16\xE\x16\xCF\v\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\a\x17\xD7\n\x17\f\x17\xE\x17\xDA\v\x17\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\xE5\n\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\a\x18\xEB\n\x18\f\x18\xE\x18\xEE\v\x18\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xF8\n\x19\x3\x19\x3\x19\a\x19"+
		"\xFC\n\x19\f\x19\xE\x19\xFF\v\x19\x3\x19\x5\x19\x102\n\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x10C\n\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x114\n\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x11B\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x122\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x129\n\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x131\n\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x139\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x142\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x6\x1A\x148\n\x1A\r\x1A\xE\x1A\x149\a\x1A\x14C\n\x1A\f\x1A\xE\x1A\x14F"+
		"\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x155\n\x1B\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x15C\n\x1C\x3\x1C\x3\x1C\x5\x1C\x160\n\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x169\n\x1C\x3\x1C"+
		"\x3\x1C\x5\x1C\x16D\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\a\x1C\x176\n\x1C\f\x1C\xE\x1C\x179\v\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x182\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x189\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x19A"+
		"\n\x1E\x3\x1E\x5\x1E\x19D\n\x1E\x3\x1E\x3\x1E\x5\x1E\x1A1\n\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x6\x1E\x1A7\n\x1E\r\x1E\xE\x1E\x1A8\x3\x1E\x3\x1E"+
		"\x5\x1E\x1AD\n\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x5"+
		"#\x1B9\n#\x3#\x3#\a#\x1BD\n#\f#\xE#\x1C0\v#\x3#\x3#\x3$\x3$\x3%\x3%\x3"+
		"%\x2\x2\x4.\x32&\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2"+
		"\x46\x2H\x2\x2\n\x4\x2\xE\xE\x19\x19\x3\x2\x33\x34\x4\x2\x3\x3\a\a\x4"+
		"\x2\x12\x12\x17\x17\x4\x2\xF\xF\x1D\x1D\x4\x2\x33\x33\x35\x36\x3\x2$)"+
		"\x4\x2\x5\x5\x18\x18\x1E7\x2O\x3\x2\x2\x2\x4R\x3\x2\x2\x2\x6\x66\x3\x2"+
		"\x2\x2\bh\x3\x2\x2\x2\nj\x3\x2\x2\x2\fn\x3\x2\x2\x2\xEw\x3\x2\x2\x2\x10"+
		"~\x3\x2\x2\x2\x12\x80\x3\x2\x2\x2\x14\x90\x3\x2\x2\x2\x16\x92\x3\x2\x2"+
		"\x2\x18\x94\x3\x2\x2\x2\x1A\x96\x3\x2\x2\x2\x1C\x9A\x3\x2\x2\x2\x1E\x9E"+
		"\x3\x2\x2\x2 \xA2\x3\x2\x2\x2\"\xA6\x3\x2\x2\x2$\xAA\x3\x2\x2\x2&\xB7"+
		"\x3\x2\x2\x2(\xB9\x3\x2\x2\x2*\xC7\x3\x2\x2\x2,\xD2\x3\x2\x2\x2.\xE4\x3"+
		"\x2\x2\x2\x30\x101\x3\x2\x2\x2\x32\x141\x3\x2\x2\x2\x34\x154\x3\x2\x2"+
		"\x2\x36\x181\x3\x2\x2\x2\x38\x188\x3\x2\x2\x2:\x1AC\x3\x2\x2\x2<\x1AE"+
		"\x3\x2\x2\x2>\x1B0\x3\x2\x2\x2@\x1B2\x3\x2\x2\x2\x42\x1B4\x3\x2\x2\x2"+
		"\x44\x1B6\x3\x2\x2\x2\x46\x1C3\x3\x2\x2\x2H\x1C5\x3\x2\x2\x2JN\x5\f\a"+
		"\x2KN\x5\x4\x3\x2LN\x5\xE\b\x2MJ\x3\x2\x2\x2MK\x3\x2\x2\x2ML\x3\x2\x2"+
		"\x2NQ\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2P\x3\x3\x2\x2\x2QO\x3\x2"+
		"\x2\x2RS\a\t\x2\x2ST\x5\x6\x4\x2TW\a\x11\x2\x2UX\x5\x10\t\x2VX\x5\x14"+
		"\v\x2WU\x3\x2\x2\x2WV\x3\x2\x2\x2X`\x3\x2\x2\x2Y\\\a\x30\x2\x2Z]\x5\x10"+
		"\t\x2[]\x5\x14\v\x2\\Z\x3\x2\x2\x2\\[\x3\x2\x2\x2]_\x3\x2\x2\x2^Y\x3\x2"+
		"\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x64\x3\x2\x2"+
		"\x2\x62`\x3\x2\x2\x2\x63\x65\x5\f\a\x2\x64\x63\x3\x2\x2\x2\x64\x65\x3"+
		"\x2\x2\x2\x65\x5\x3\x2\x2\x2\x66g\a@\x2\x2g\a\x3\x2\x2\x2hi\a@\x2\x2i"+
		"\t\x3\x2\x2\x2jk\x5\b\x5\x2kl\a&\x2\x2lm\x5\x38\x1D\x2m\v\x3\x2\x2\x2"+
		"no\a\v\x2\x2ot\x5\n\x6\x2pq\a\x30\x2\x2qs\x5\n\x6\x2rp\x3\x2\x2\x2sv\x3"+
		"\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2u\r\x3\x2\x2\x2vt\x3\x2\x2\x2wx\a"+
		"\x1B\x2\x2xz\x5\x10\t\x2y{\x5\x12\n\x2zy\x3\x2\x2\x2{|\x3\x2\x2\x2|z\x3"+
		"\x2\x2\x2|}\x3\x2\x2\x2}\xF\x3\x2\x2\x2~\x7F\a@\x2\x2\x7F\x11\x3\x2\x2"+
		"\x2\x80\x81\a\x1A\x2\x2\x81\x86\x5\x14\v\x2\x82\x83\a#\x2\x2\x83\x84\x5"+
		".\x18\x2\x84\x85\a \x2\x2\x85\x87\x3\x2\x2\x2\x86\x82\x3\x2\x2\x2\x86"+
		"\x87\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\t\x2\x2\x2\x89\x8B\a\x1E"+
		"\x2\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C"+
		"\x8D\x5\x32\x1A\x2\x8D\x8E\a\f\x2\x2\x8E\x8F\x5\x16\f\x2\x8F\x13\x3\x2"+
		"\x2\x2\x90\x91\t\x3\x2\x2\x91\x15\x3\x2\x2\x2\x92\x93\a\x41\x2\x2\x93"+
		"\x17\x3\x2\x2\x2\x94\x95\a\x41\x2\x2\x95\x19\x3\x2\x2\x2\x96\x97\x5 \x11"+
		"\x2\x97\x98\a\x31\x2\x2\x98\x99\x5\"\x12\x2\x99\x1B\x3\x2\x2\x2\x9A\x9B"+
		"\x5 \x11\x2\x9B\x9C\a\x31\x2\x2\x9C\x9D\x5$\x13\x2\x9D\x1D\x3\x2\x2\x2"+
		"\x9E\x9F\x5 \x11\x2\x9F\xA0\a\x31\x2\x2\xA0\xA1\x5$\x13\x2\xA1\x1F\x3"+
		"\x2\x2\x2\xA2\xA3\a.\x2\x2\xA3\xA4\a@\x2\x2\xA4\xA5\a/\x2\x2\xA5!\x3\x2"+
		"\x2\x2\xA6\xA7\a,\x2\x2\xA7\xA8\a@\x2\x2\xA8\xA9\a-\x2\x2\xA9#\x3\x2\x2"+
		"\x2\xAA\xAC\a,\x2\x2\xAB\xAD\a@\x2\x2\xAC\xAB\x3\x2\x2\x2\xAC\xAD\x3\x2"+
		"\x2\x2\xAD\xB2\x3\x2\x2\x2\xAE\xAF\a\x30\x2\x2\xAF\xB1\a@\x2\x2\xB0\xAE"+
		"\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2"+
		"\x2\xB3\xB5\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB6\a-\x2\x2\xB6%\x3\x2"+
		"\x2\x2\xB7\xB8\a@\x2\x2\xB8\'\x3\x2\x2\x2\xB9\xBA\x5&\x14\x2\xBA\xBC\a"+
		"*\x2\x2\xBB\xBD\x5\x34\x1B\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2"+
		"\xBD\xC2\x3\x2\x2\x2\xBE\xBF\a\x30\x2\x2\xBF\xC1\x5\x34\x1B\x2\xC0\xBE"+
		"\x3\x2\x2\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2"+
		"\x2\xC3\xC5\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC6\a+\x2\x2\xC6)\x3\x2"+
		"\x2\x2\xC7\xC8\a*\x2\x2\xC8\xCD\x5\x38\x1D\x2\xC9\xCA\a\x30\x2\x2\xCA"+
		"\xCC\x5\x38\x1D\x2\xCB\xC9\x3\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3"+
		"\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD0\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2"+
		"\xD0\xD1\a+\x2\x2\xD1+\x3\x2\x2\x2\xD2\xD3\a,\x2\x2\xD3\xD8\x5*\x16\x2"+
		"\xD4\xD5\a\x30\x2\x2\xD5\xD7\x5*\x16\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDA\x3"+
		"\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDB\x3\x2\x2\x2"+
		"\xDA\xD8\x3\x2\x2\x2\xDB\xDC\a-\x2\x2\xDC-\x3\x2\x2\x2\xDD\xDE\b\x18\x1"+
		"\x2\xDE\xE5\x5\x30\x19\x2\xDF\xE5\x5\x32\x1A\x2\xE0\xE1\a*\x2\x2\xE1\xE2"+
		"\x5.\x18\x2\xE2\xE3\a+\x2\x2\xE3\xE5\x3\x2\x2\x2\xE4\xDD\x3\x2\x2\x2\xE4"+
		"\xDF\x3\x2\x2\x2\xE4\xE0\x3\x2\x2\x2\xE5\xEC\x3\x2\x2\x2\xE6\xE7\f\x3"+
		"\x2\x2\xE7\xE8\x5H%\x2\xE8\xE9\x5.\x18\x4\xE9\xEB\x3\x2\x2\x2\xEA\xE6"+
		"\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2"+
		"\x2\xED/\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF0\a\t\x2\x2\xF0\xF1\a\x13"+
		"\x2\x2\xF1\x102\x5\x6\x4\x2\xF2\xF3\a\t\x2\x2\xF3\xF4\a\x13\x2\x2\xF4"+
		"\xF5\a\x12\x2\x2\xF5\xF7\a,\x2\x2\xF6\xF8\x5\x6\x4\x2\xF7\xF6\x3\x2\x2"+
		"\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFD\x3\x2\x2\x2\xF9\xFA\a\x30\x2\x2\xFA\xFC"+
		"\x5\x6\x4\x2\xFB\xF9\x3\x2\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3\x2\x2"+
		"\x2\xFD\xFE\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\x100"+
		"\x102\a-\x2\x2\x101\xEF\x3\x2\x2\x2\x101\xF2\x3\x2\x2\x2\x102\x31\x3\x2"+
		"\x2\x2\x103\x104\b\x1A\x1\x2\x104\x105\a*\x2\x2\x105\x106\x5\x32\x1A\x2"+
		"\x106\x107\a+\x2\x2\x107\x142\x3\x2\x2\x2\x108\x10B\x5\x1A\xE\x2\x109"+
		"\x10A\a\n\x2\x2\x10A\x10C\a\x15\x2\x2\x10B\x109\x3\x2\x2\x2\x10B\x10C"+
		"\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10E\a\x14\x2\x2\x10E\x10F\x5"+
		"\x18\r\x2\x10F\x142\x3\x2\x2\x2\x110\x113\x5\x1A\xE\x2\x111\x112\a\n\x2"+
		"\x2\x112\x114\a\x15\x2\x2\x113\x111\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2"+
		"\x114\x115\x3\x2\x2\x2\x115\x116\a\r\x2\x2\x116\x142\x3\x2\x2\x2\x117"+
		"\x11A\x5 \x11\x2\x118\x119\a\n\x2\x2\x119\x11B\a\x15\x2\x2\x11A\x118\x3"+
		"\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\a\r\x2"+
		"\x2\x11D\x142\x3\x2\x2\x2\x11E\x11F\x5\x1C\xF\x2\x11F\x121\a\x13\x2\x2"+
		"\x120\x122\a\x15\x2\x2\x121\x120\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122"+
		"\x123\x3\x2\x2\x2\x123\x124\a\"\x2\x2\x124\x142\x3\x2\x2\x2\x125\x126"+
		"\x5\x1C\xF\x2\x126\x128\a\x13\x2\x2\x127\x129\a\x15\x2\x2\x128\x127\x3"+
		"\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12B\a\x12"+
		"\x2\x2\x12B\x12C\x5,\x17\x2\x12C\x142\x3\x2\x2\x2\x12D\x12E\x5\x1A\xE"+
		"\x2\x12E\x130\a\x13\x2\x2\x12F\x131\a\x15\x2\x2\x130\x12F\x3\x2\x2\x2"+
		"\x130\x131\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\a\x12\x2\x2\x133"+
		"\x134\x5\x44#\x2\x134\x142\x3\x2\x2\x2\x135\x136\x5\x1C\xF\x2\x136\x138"+
		"\a\x13\x2\x2\x137\x139\a\x15\x2\x2\x138\x137\x3\x2\x2\x2\x138\x139\x3"+
		"\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\a\x12\x2\x2\x13B\x13C\x5\x1E"+
		"\x10\x2\x13C\x142\x3\x2\x2\x2\x13D\x13E\x5\x34\x1B\x2\x13E\x13F\x5\x46"+
		"$\x2\x13F\x140\x5\x34\x1B\x2\x140\x142\x3\x2\x2\x2\x141\x103\x3\x2\x2"+
		"\x2\x141\x108\x3\x2\x2\x2\x141\x110\x3\x2\x2\x2\x141\x117\x3\x2\x2\x2"+
		"\x141\x11E\x3\x2\x2\x2\x141\x125\x3\x2\x2\x2\x141\x12D\x3\x2\x2\x2\x141"+
		"\x135\x3\x2\x2\x2\x141\x13D\x3\x2\x2\x2\x142\x14D\x3\x2\x2\x2\x143\x147"+
		"\f\v\x2\x2\x144\x145\x5H%\x2\x145\x146\x5\x32\x1A\x2\x146\x148\x3\x2\x2"+
		"\x2\x147\x144\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2"+
		"\x149\x14A\x3\x2\x2\x2\x14A\x14C\x3\x2\x2\x2\x14B\x143\x3\x2\x2\x2\x14C"+
		"\x14F\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x33"+
		"\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x155\x5\x1A\xE\x2\x151\x155\x5"+
		"(\x15\x2\x152\x155\x5\x38\x1D\x2\x153\x155\x5\x36\x1C\x2\x154\x150\x3"+
		"\x2\x2\x2\x154\x151\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x154\x153\x3\x2"+
		"\x2\x2\x155\x35\x3\x2\x2\x2\x156\x157\a:\x2\x2\x157\x158\a*\x2\x2\x158"+
		"\x15B\x5 \x11\x2\x159\x15A\a\b\x2\x2\x15A\x15C\x5$\x13\x2\x15B\x159\x3"+
		"\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D\x15E\a#\x2"+
		"\x2\x15E\x160\x5\x32\x1A\x2\x15F\x15D\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2"+
		"\x160\x161\x3\x2\x2\x2\x161\x162\a+\x2\x2\x162\x182\x3\x2\x2\x2\x163\x164"+
		"\a\x39\x2\x2\x164\x165\a*\x2\x2\x165\x168\x5\x1A\xE\x2\x166\x167\a\b\x2"+
		"\x2\x167\x169\x5$\x13\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169"+
		"\x16C\x3\x2\x2\x2\x16A\x16B\a#\x2\x2\x16B\x16D\x5\x32\x1A\x2\x16C\x16A"+
		"\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x16F\a+"+
		"\x2\x2\x16F\x182\x3\x2\x2\x2\x170\x171\a\x39\x2\x2\x171\x172\a*\x2\x2"+
		"\x172\x177\x5\x1C\xF\x2\x173\x174\a\x30\x2\x2\x174\x176\x5\x1C\xF\x2\x175"+
		"\x173\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2\x177\x175\x3\x2\x2\x2\x177\x178"+
		"\x3\x2\x2\x2\x178\x17A\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x17A\x17B\a+"+
		"\x2\x2\x17B\x182\x3\x2\x2\x2\x17C\x17D\x5> \x2\x17D\x17E\a>\x2\x2\x17E"+
		"\x17F\t\x4\x2\x2\x17F\x180\x5:\x1E\x2\x180\x182\x3\x2\x2\x2\x181\x156"+
		"\x3\x2\x2\x2\x181\x163\x3\x2\x2\x2\x181\x170\x3\x2\x2\x2\x181\x17C\x3"+
		"\x2\x2\x2\x182\x37\x3\x2\x2\x2\x183\x189\x5<\x1F\x2\x184\x189\x5:\x1E"+
		"\x2\x185\x189\x5@!\x2\x186\x189\x5\x42\"\x2\x187\x189\x5\b\x5\x2\x188"+
		"\x183\x3\x2\x2\x2\x188\x184\x3\x2\x2\x2\x188\x185\x3\x2\x2\x2\x188\x186"+
		"\x3\x2\x2\x2\x188\x187\x3\x2\x2\x2\x189\x39\x3\x2\x2\x2\x18A\x1AD\a!\x2"+
		"\x2\x18B\x1AD\a\x37\x2\x2\x18C\x1AD\a\x38\x2\x2\x18D\x18E\a;\x2\x2\x18E"+
		"\x18F\a?\x2\x2\x18F\x190\a\x12\x2\x2\x190\x1AD\a=\x2\x2\x191\x1AD\x5\x1A"+
		"\xE\x2\x192\x1AD\x5\b\x5\x2\x193\x194\a>\x2\x2\x194\x195\a\x1C\x2\x2\x195"+
		"\x199\x5:\x1E\x2\x196\x197\a\x6\x2\x2\x197\x198\a\x17\x2\x2\x198\x19A"+
		"\x5:\x1E\x2\x199\x196\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x1AD\x3\x2"+
		"\x2\x2\x19B\x19D\a\x1F\x2\x2\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2"+
		"\x2\x19D\x19E\x3\x2\x2\x2\x19E\x1A0\a<\x2\x2\x19F\x1A1\t\x5\x2\x2\x1A0"+
		"\x19F\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3"+
		"\a*\x2\x2\x1A3\x1A6\x5:\x1E\x2\x1A4\x1A5\a\x30\x2\x2\x1A5\x1A7\x5:\x1E"+
		"\x2\x1A6\x1A4\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2"+
		"\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AB\a+\x2\x2\x1AB\x1AD"+
		"\x3\x2\x2\x2\x1AC\x18A\x3\x2\x2\x2\x1AC\x18B\x3\x2\x2\x2\x1AC\x18C\x3"+
		"\x2\x2\x2\x1AC\x18D\x3\x2\x2\x2\x1AC\x191\x3\x2\x2\x2\x1AC\x192\x3\x2"+
		"\x2\x2\x1AC\x193\x3\x2\x2\x2\x1AC\x19C\x3\x2\x2\x2\x1AD;\x3\x2\x2\x2\x1AE"+
		"\x1AF\t\x6\x2\x2\x1AF=\x3\x2\x2\x2\x1B0\x1B1\a\x35\x2\x2\x1B1?\x3\x2\x2"+
		"\x2\x1B2\x1B3\t\a\x2\x2\x1B3\x41\x3\x2\x2\x2\x1B4\x1B5\a\x41\x2\x2\x1B5"+
		"\x43\x3\x2\x2\x2\x1B6\x1B8\a,\x2\x2\x1B7\x1B9\x5\x38\x1D\x2\x1B8\x1B7"+
		"\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BE\x3\x2\x2\x2\x1BA\x1BB\a\x30"+
		"\x2\x2\x1BB\x1BD\x5\x38\x1D\x2\x1BC\x1BA\x3\x2\x2\x2\x1BD\x1C0\x3\x2\x2"+
		"\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C1\x3\x2\x2\x2"+
		"\x1C0\x1BE\x3\x2\x2\x2\x1C1\x1C2\a-\x2\x2\x1C2\x45\x3\x2\x2\x2\x1C3\x1C4"+
		"\t\b\x2\x2\x1C4G\x3\x2\x2\x2\x1C5\x1C6\t\t\x2\x2\x1C6I\x3\x2\x2\x2\x30"+
		"MOW\\`\x64t|\x86\x8A\xAC\xB2\xBC\xC2\xCD\xD8\xE4\xEC\xF7\xFD\x101\x10B"+
		"\x113\x11A\x121\x128\x130\x138\x141\x149\x14D\x154\x15B\x15F\x168\x16C"+
		"\x177\x181\x188\x199\x19C\x1A0\x1A8\x1AC\x1B8\x1BE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Engine.Language
